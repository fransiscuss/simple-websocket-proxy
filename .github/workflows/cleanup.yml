name: Repository Cleanup

on:
  schedule:
    # Run cleanup weekly on Sundays at 5 AM UTC
    - cron: '0 5 * * 0'
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'artifacts'
        type: choice
        options:
          - artifacts
          - caches
          - all

# Only allow one cleanup to run at a time
concurrency:
  group: cleanup
  cancel-in-progress: false

env:
  RETENTION_DAYS: 30

jobs:
  # Clean up old workflow artifacts
  cleanup-artifacts:
    name: Cleanup Workflow Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'artifacts' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    permissions:
      actions: write
      contents: read
    
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const retentionDays = ${{ env.RETENTION_DAYS }};
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
            
            console.log(`Cleaning up artifacts older than ${cutoffDate.toISOString()}`);
            
            let deletedCount = 0;
            let totalSize = 0;
            
            const artifacts = await github.paginate(github.rest.actions.listArtifactsForRepo, {
              owner,
              repo,
              per_page: 100
            });
            
            for (const artifact of artifacts) {
              const createdAt = new Date(artifact.created_at);
              
              if (createdAt < cutoffDate) {
                console.log(`Deleting artifact: ${artifact.name} (${artifact.size_in_bytes} bytes, created: ${artifact.created_at})`);
                
                try {
                  await github.rest.actions.deleteArtifact({
                    owner,
                    repo,
                    artifact_id: artifact.id
                  });
                  
                  deletedCount++;
                  totalSize += artifact.size_in_bytes;
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }
            
            const totalSizeMB = (totalSize / 1024 / 1024).toFixed(2);
            console.log(`Cleanup complete: Deleted ${deletedCount} artifacts, freed ${totalSizeMB} MB`);
            
            // Create summary
            core.summary
              .addHeading('Artifact Cleanup Results')
              .addTable([
                ['Metric', 'Value'],
                ['Artifacts Deleted', deletedCount.toString()],
                ['Space Freed', `${totalSizeMB} MB`],
                ['Retention Period', `${retentionDays} days`],
                ['Cleanup Date', new Date().toISOString()]
              ])
              .write();

  # Clean up old workflow runs
  cleanup-runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    permissions:
      actions: write
      contents: read
    
    steps:
      - name: Cleanup old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const retentionDays = ${{ env.RETENTION_DAYS }} * 2; // Keep runs longer than artifacts
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
            
            console.log(`Cleaning up workflow runs older than ${cutoffDate.toISOString()}`);
            
            let deletedCount = 0;
            
            // Get all workflows
            const workflows = await github.paginate(github.rest.actions.listRepoWorkflows, {
              owner,
              repo
            });
            
            for (const workflow of workflows) {
              console.log(`Processing workflow: ${workflow.name} (${workflow.id})`);
              
              const runs = await github.paginate(github.rest.actions.listWorkflowRuns, {
                owner,
                repo,
                workflow_id: workflow.id,
                status: 'completed',
                per_page: 100
              });
              
              for (const run of runs) {
                const createdAt = new Date(run.created_at);
                
                if (createdAt < cutoffDate && run.conclusion !== 'success') {
                  console.log(`Deleting failed run: ${run.id} (${run.status}/${run.conclusion}, created: ${run.created_at})`);
                  
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner,
                      repo,
                      run_id: run.id
                    });
                    
                    deletedCount++;
                  } catch (error) {
                    console.log(`Failed to delete run ${run.id}: ${error.message}`);
                  }
                }
              }
            }
            
            console.log(`Cleanup complete: Deleted ${deletedCount} workflow runs`);
            
            // Create summary
            core.summary
              .addHeading('Workflow Runs Cleanup Results')
              .addTable([
                ['Metric', 'Value'],
                ['Workflow Runs Deleted', deletedCount.toString()],
                ['Retention Period', `${retentionDays} days`],
                ['Cleanup Date', new Date().toISOString()]
              ])
              .write();

  # Clean up package registry (if using GitHub Packages)
  cleanup-packages:
    name: Cleanup Old Package Versions
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    permissions:
      packages: write
      contents: read
    
    steps:
      - name: Cleanup old package versions
        uses: actions/github-script@v7
        with:
          script: |
            const { owner } = context.repo;
            const retentionDays = ${{ env.RETENTION_DAYS }};
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
            
            console.log(`Cleaning up package versions older than ${cutoffDate.toISOString()}`);
            
            let deletedCount = 0;
            
            try {
              // List packages for the organization/user
              const packages = await github.paginate(github.rest.packages.listPackagesForOrganization, {
                org: owner,
                package_type: 'container'
              });
              
              for (const pkg of packages) {
                if (pkg.name.includes('simple-websocket-proxy')) {
                  console.log(`Processing package: ${pkg.name}`);
                  
                  const versions = await github.paginate(github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg, {
                    org: owner,
                    package_type: 'container',
                    package_name: pkg.name
                  });
                  
                  // Keep the latest 10 versions and delete older ones
                  const sortedVersions = versions.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                  const versionsToDelete = sortedVersions.slice(10);
                  
                  for (const version of versionsToDelete) {
                    const createdAt = new Date(version.created_at);
                    
                    if (createdAt < cutoffDate) {
                      console.log(`Deleting package version: ${version.name || version.id} (created: ${version.created_at})`);
                      
                      try {
                        await github.rest.packages.deletePackageVersionForOrg({
                          org: owner,
                          package_type: 'container',
                          package_name: pkg.name,
                          package_version_id: version.id
                        });
                        
                        deletedCount++;
                      } catch (error) {
                        console.log(`Failed to delete package version ${version.id}: ${error.message}`);
                      }
                    }
                  }
                }
              }
            } catch (error) {
              console.log(`Package cleanup skipped: ${error.message}`);
            }
            
            console.log(`Package cleanup complete: Deleted ${deletedCount} package versions`);
            
            // Create summary
            core.summary
              .addHeading('Package Cleanup Results')
              .addTable([
                ['Metric', 'Value'],
                ['Package Versions Deleted', deletedCount.toString()],
                ['Retention Period', `${retentionDays} days`],
                ['Cleanup Date', new Date().toISOString()]
              ])
              .write();

  # Generate cleanup report
  cleanup-report:
    name: Generate Cleanup Report
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, cleanup-runs, cleanup-packages]
    if: always()
    
    steps:
      - name: Generate cleanup summary
        run: |
          echo "# Repository Cleanup Report" > cleanup-report.md
          echo "Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> cleanup-report.md
          echo "Trigger: ${{ github.event_name }}" >> cleanup-report.md
          echo "" >> cleanup-report.md
          
          echo "## Cleanup Results" >> cleanup-report.md
          echo "| Task | Status | Notes |" >> cleanup-report.md
          echo "|------|--------|-------|" >> cleanup-report.md
          echo "| Artifacts Cleanup | ${{ needs.cleanup-artifacts.result == 'success' && '✅ Completed' || needs.cleanup-artifacts.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Remove old workflow artifacts |" >> cleanup-report.md
          echo "| Workflow Runs Cleanup | ${{ needs.cleanup-runs.result == 'success' && '✅ Completed' || needs.cleanup-runs.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Remove old failed workflow runs |" >> cleanup-report.md
          echo "| Package Cleanup | ${{ needs.cleanup-packages.result == 'success' && '✅ Completed' || needs.cleanup-packages.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Remove old package versions |" >> cleanup-report.md
          echo "" >> cleanup-report.md
          
          echo "## Configuration" >> cleanup-report.md
          echo "- **Retention Period**: ${{ env.RETENTION_DAYS }} days" >> cleanup-report.md
          echo "- **Cleanup Type**: ${{ github.event.inputs.cleanup_type || 'scheduled' }}" >> cleanup-report.md
          echo "" >> cleanup-report.md
          
          echo "## Next Steps" >> cleanup-report.md
          echo "- Review cleanup results in job summaries" >> cleanup-report.md
          echo "- Adjust retention periods if needed" >> cleanup-report.md
          echo "- Monitor repository storage usage" >> cleanup-report.md

      - name: Upload cleanup report
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-report-${{ github.run_number }}
          path: cleanup-report.md
          retention-days: 90